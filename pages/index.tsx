import Head from 'next/head'
import { Inter } from '@next/font/google'
import { useAccount, useConnect, useDisconnect } from 'wagmi'
import { useEffect, useState } from 'react'
import { goerli } from '@wagmi/core/chains'
import Balance from '@/components/balance'

export default function Home() {
  const { address, connector } = useAccount()
  const { connect, connectors, error, isLoading, pendingConnector } =
    useConnect()
  const { disconnect } = useDisconnect()
  const [isConnected, setIsConnected] = useState(false);

  useEffect(() => {
    if (address) setIsConnected(true);
    else if (isConnected) setIsConnected(false);
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [address]);

  console.log("connector", connector)

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        {isConnected ? (
           <div>
            <div>Connected to {address}</div>
            <button
              onClick={() => disconnect()}
              style={{
                marginTop: "8px",
                marginBottom: "8px",
              }}
            >
              Disconnect</button>
            <Balance />
          </div>
        ) : (
          <>
            {connectors.map((connector) => (
              <button
                disabled={!connector.ready}
                key={connector.id}
                onClick={() => connect({ connector, chainId: goerli.id })}
                style={{
                  margin: "8px"
              }}
              >
                {connector.name}
                {!connector.ready && ' (unsupported)'}
                {isLoading &&
                  connector.id === pendingConnector?.id &&
                  ' (connecting)'}
              </button>
            ))}
          </>
        )}
      
 
      {error && <div>{error.message}</div>}
    </div>
    </>
  )
}